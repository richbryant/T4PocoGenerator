<#@ template language="C#" hostspecific="true" debug="True" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="Microsoft.SqlServer.Smo" #>
<#@ assembly name="Microsoft.SqlServer.ConnectionInfo" #>
<#@ assembly name="Microsoft.SqlServer.Management.Sdk.Sfc" #>
<#@ assembly name="$(ProjectDir)\\bin\\Debug\\Extensions.dll"#>
<#@ import namespace="Extensions" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="Microsoft.SqlServer.Management.Smo" #>
<#
    //**********************************************************************************************
    // This T4 generates POCOs from the specified DB and saves them to the specified folder which 
    // is relative to the template's location. One file per table/POCO.
    //**********************************************************************************************
    //****************************
    // DEFINE YOUR VARIABLES HERE
    //****************************
    // The SQL server name or IP
    string sqlServer = "virtualhost\\sqlexpress";
    // The SQL database to generate the interfaces for
    string sqlDatabase = "proTrace_Jupiter_blank";
    // The namespace to apply to the generated interfaces
    string classNamespace = "Practicon.Datalayer.Cip.Interfaces";
    // The destination folder for the generated classes, relative to this file's location.
    string destinationFolder = "Interfaces";
	//Schema to loop over
	string schema = "Cip";
    // Loop over each table and create a repo class
    Server server = new Server(sqlServer);
    server.ConnectionContext.LoginSecure = true;
    
    server.ConnectionContext.Connect();
    foreach (Table table in server.Databases[sqlDatabase].Tables)
    {
        // Skip sys tables
        if(table.Name.StartsWith("sys") || table.Name.StartsWith("tblMimicDataLogged_") 
                                                 || table.Name.StartsWith("tblMimicSnapShotdata_") || table.Name.StartsWith("tblMimicSnapShots_") || table.Schema != schema)
        {
            continue;
        }
		var tableName = table.Name.Clean();
#>
using System.Collections.Generic;
using Practicon.Datalayer.Cip.Models;
namespace <#= classNamespace #>
{
    public interface <#= "I" + tableName + "Repository" #> 
    {
		/// <summary>
        /// Return a single instance of <#= tableName #>
        /// </summary>
	    <#= tableName #> Get(long id);
		
		/// <summary>
		/// Return an enumerable collection of <#= tableName #>
		/// </summary>
		IEnumerable<<#= tableName #>> Get();
		
		/// <summary>1
		/// Insert or update a list of <#= tableName #>
		/// </summary>
	    void Merge(IEnumerable<<#= tableName #>> list);
		
		/// <summary>
		/// Insert or update an instance of <#= tableName #>
		/// </summary>
		void Merge(<#= tableName #> item);
		
		/// <summary>
		/// Delete a list of <#= tableName #>
		/// </summary>
		void Delete(IEnumerable<<#= tableName #>> list);
		
		/// <summary>
		/// Delete an instance of <#= tableName #>
		/// </summary>
		void Delete(long id);
    }
}      
<#
        // Write new repo class to its own file
        SaveOutput("I" + table.Name.Replace("tbl", "") + "Repository" + ".cs", destinationFolder);
    } 
#>
<#+
    void SaveOutput(string outputFileName, string destinationFolder)
    {
        // Write to destination folder
        string templateDirectory = Path.Combine(Path.GetDirectoryName(Host.TemplateFile), destinationFolder);
        string outputFilePath = Path.Combine(templateDirectory, outputFileName);
        File.Delete(outputFilePath);
        File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 
        // Flush generation
        this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
    }
#>