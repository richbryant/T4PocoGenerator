<#@ template language="C#" hostspecific="true" debug="True" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="Microsoft.SqlServer.Smo" #>
<#@ assembly name="Microsoft.SqlServer.ConnectionInfo" #>
<#@ assembly name="Microsoft.SqlServer.Management.Sdk.Sfc" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="Microsoft.SqlServer.Management.Smo" #>
<#
    //**********************************************************************************************
    // This T4 generates ViewModels from the specified DB and saves them to the specified folder which 
    // is relative to the template's location. One file per table/POCO.
    //**********************************************************************************************
    //****************************
    // DEFINE YOUR VARIABLES HERE
    //****************************
    // The SQL server name or IP
    string sqlServer = "C877";
    // The SQL database to generate the POCOs for
    string sqlDatabase = "proTrace_Jupiter_blank";
    // The namespace to apply to the generated classes
    string classNamespace = "Practicon.Datalayer.ViewModels";
    // The destination folder for the generated classes, relative to this file's location.
    string destinationFolder = "ViewModels";
    // Loop over each table and create a class file!
    Server server = new Server(sqlServer);
    server.ConnectionContext.LoginSecure = true;
    //server.ConnectionContext.Login = sqlLogin;
    //server.ConnectionContext.Password = sqlPassword;
    server.ConnectionContext.Connect();
    foreach (Table table in server.Databases[sqlDatabase].Tables)
    {
        // Skip sys tables
        if(table.Name.StartsWith("sys") || table.Name.StartsWith("tblMimicDataLogged_") 
                                                 || table.Name.StartsWith("tblMimicSnapshotdata_") || table.Name.StartsWith("tblMimicSnapshots_"))
        {
            continue;
        }
		string tableName = table.Name.Replace("tbl", "");
		string className = table.Name.Replace("tbl", "") + "ViewModel";

#>
using System;
using Prism.Mvvm;
using Practicon.Datalayer.Models;
namespace <#= classNamespace #>
{
    /// <summary>
    /// Represents a <#= table.Name #>.
    /// NOTE: This class is generated from a T4 template.
    /// </summary>
    public class <#= className #> : BindableBase
    {
		public <#= className #>()
		{}

		public <#= className #>(<#= table.Name #> data)
		{
			Data = data;
		}

		public <#= table.Name #> Data { get; private set; } = new <#= table.Name #>();

<# 
        // Keep count so we don't whitespace the last property/column
        int columnCount = table.Columns.Count;
        int i = 0;
        // Iterate all columns
        foreach (Column col in table.Columns)
        {
			string colName = col.Name.Replace("fld", "");
			string fldName = colName;
            i++;
            string propertyType = GetNetDataType(col.DataType.Name);
            // If we can't map it, skip it
            if (string.IsNullOrWhiteSpace(propertyType))
            {
                // Skip
                continue;
            }
            
#>
		public <#= propertyType #> <#= colName #> 
		{ 
			get => Data.<#= col.Name #>;
			set
			{
				Data.<#= col.Name #> = value;
				RaisePropertyChanged();
			}
		}

<#
            // Do we insert the space?
            if (i != columnCount)
            {
#>
<#
            }
#>
<#
        }
#>

		public static <#= className #> New(<#= table.Name #> data)
		{
			return new <#= className #>(data);
		}
    }
}      
<#
        // Write new POCO class to its own file
        SaveOutput(className + ".cs", destinationFolder);
    } 
#>
<#+
    public static string GetNetDataType(string sqlDataTypeName)
    {
        switch (sqlDataTypeName.ToLower())
        {
            case "bigint":
                return "long";
            case "binary":
            case "image":
            case "varbinary":
                return "byte[]";
            case "bit":
                return "bool";
            case "char":
                return "char";
            case "datetime":
            case "smalldatetime":
                return "DateTime";
            case "decimal":
            case "money":
            case "numeric":
                return "decimal";
            case "float":
                return "double";
            case "int":
                return "int";
            case "nchar":
            case "nvarchar":
            case "text":
            case "varchar":
            case "xml":
                return "string";
            case "real":
                return "single";
            case "smallint":
                return "short";
            case "tinyint":
                return "byte";
            case "uniqueidentifier":
                return "Guid";
            default:
                return null;
        }
    }
    void SaveOutput(string outputFileName, string destinationFolder)
    {
        // Write to destination folder
        string templateDirectory = Path.Combine(Path.GetDirectoryName(Host.TemplateFile), destinationFolder);
        string outputFilePath = Path.Combine(templateDirectory, outputFileName);
        File.Delete(outputFilePath);
        File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 
        // Flush generation
        this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
    }
#>
