<#@ template language="C#" hostspecific="true" debug="True" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="Microsoft.SqlServer.Smo" #>
<#@ assembly name="Microsoft.SqlServer.ConnectionInfo" #>
<#@ assembly name="Microsoft.SqlServer.Management.Sdk.Sfc" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="Microsoft.SqlServer.Management.Smo" #>
<#
    //**********************************************************************************************
    // This T4 generates POCOs from the specified DB and saves them to the specified folder which 
    // is relative to the template's location. One file per table/POCO.
    //**********************************************************************************************
    //****************************
    // DEFINE YOUR VARIABLES HERE
    //****************************
    // The SQL server name or IP
    string sqlServer = "C877";
    // The SQL database to generate the interfaces for
    string sqlDatabase = "proTrace_Jupiter_blank";
    // The namespace to apply to the generated interfaces
    string classNamespace = "Practicon.Datalayer.Repositories";
    // The destination folder for the generated classes, relative to this file's location.
    string destinationFolder = "Repositories";
    // Loop over each table and create a repo class
    Server server = new Server(sqlServer);
    server.ConnectionContext.LoginSecure = true;
    
    server.ConnectionContext.Connect();
    foreach (Table table in server.Databases[sqlDatabase].Tables)
    {
        // Skip sys tables
        if(table.Name.StartsWith("sys") || table.Name.StartsWith("tblMimicDataLogged_") 
                                                 || table.Name.StartsWith("tblMimicSnapShotdata_") || table.Name.StartsWith("tblMimicSnapShots_"))
        {
            continue;
        }
#>
using System;
using System.Collections.Generic;
using Insight.Database;
using Serilog;
using Practicon.Datalayer.Models;
using Practicon.Datalayer.Insight;
using Practicon.Datalayer.Interfaces;
namespace <#= classNamespace #>
{
    public class <#= table.Name.Replace("tbl", "") + "Repository" #> : <#= "I" + table.Name.Replace("tbl", "") + "Repository" #>
    {
	    private readonly <#= "I" + table.Name.Replace("tbl", "") + "Data"#> _data;
		private readonly ILogger _log;

	    public <#= table.Name.Replace("tbl", "") + "Repository" #>(<#= "I" + table.Name.Replace("tbl", "") + "Data data"  #>, ILogger log)
		{
			_data = data;
			_log = log;
		}

		public <#= table.Name #> Get(long id)
		{
			try
			{
				return _data.Get(id);
			}
			catch(Exception ex)
			{
				_log.Error(ex.Message);
			}
			return default(<#= table.Name #>);
		}

		public IEnumerable<<#= table.Name #>> Get()
		{
			try
			{
				return _data.Get();
			}
			catch (Exception ex)
			{
				_log.Error(ex.Message);
				return default(IEnumerable<<#= table.Name #>>);
			}
		}
        
	    public void Merge(IEnumerable<<#= table.Name #>> list)
		{
			try
			{
				_data.Merge(list);
			}
			catch (Exception ex)
			{
				_log.Error(ex.Message);
			}
		}

		public void Merge(<#= table.Name #> item)
		{
			try
			{
				_data.Merge(item);
			}
			catch (Exception ex)
			{
				_log.Error(ex.Message);
			}
		}

		public void Delete(IEnumerable<<#= table.Name #>> list)
		{
			try
			{
				_data.Delete(list);
			}
			catch (Exception ex)
			{
				_log.Error(ex.Message);
			}
		}

		public void Delete(long id)
		{
			try
			{
				_data.Delete(id);
			}
			catch (Exception ex)
			{
				_log.Error(ex.Message);
			}
		}
    }
}      
<#
        // Write new repo class to its own file
        SaveOutput(table.Name.Replace("tbl", "") + "Repository" + ".cs", destinationFolder);
    } 
#>
<#+
    void SaveOutput(string outputFileName, string destinationFolder)
    {
        // Write to destination folder
        string templateDirectory = Path.Combine(Path.GetDirectoryName(Host.TemplateFile), destinationFolder);
        string outputFilePath = Path.Combine(templateDirectory, outputFileName);
        File.Delete(outputFilePath);
        File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 
        // Flush generation
        this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
    }
#>